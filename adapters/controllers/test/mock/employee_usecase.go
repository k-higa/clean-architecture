// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/emoloyee_usecase.go

// Package mock_usecases is a generated GoMock package.
package mock

import (
	input_port "clean-architecture/usecases/input_port"
	output_port "clean-architecture/usecases/output_port"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEmployeeUseCase is a mock of EmployeeUseCase interface
type MockEmployeeUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeUseCaseMockRecorder
}

// MockEmployeeUseCaseMockRecorder is the mock recorder for MockEmployeeUseCase
type MockEmployeeUseCaseMockRecorder struct {
	mock *MockEmployeeUseCase
}

// NewMockEmployeeUseCase creates a new mock instance
func NewMockEmployeeUseCase(ctrl *gomock.Controller) *MockEmployeeUseCase {
	mock := &MockEmployeeUseCase{ctrl: ctrl}
	mock.recorder = &MockEmployeeUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmployeeUseCase) EXPECT() *MockEmployeeUseCaseMockRecorder {
	return m.recorder
}

// FindEmployee mocks base method
func (m *MockEmployeeUseCase) FindEmployee(d input_port.Emoployee) (*output_port.Emoployee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEmployee", d)
	ret0, _ := ret[0].(*output_port.Emoployee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEmployee indicates an expected call of FindEmployee
func (mr *MockEmployeeUseCaseMockRecorder) FindEmployee(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEmployee", reflect.TypeOf((*MockEmployeeUseCase)(nil).FindEmployee), d)
}
