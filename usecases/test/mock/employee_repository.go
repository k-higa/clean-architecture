// Code generated by MockGen. DO NOT EDIT.
// Source: domains/employee_repository.go

// Package mock_domains is a generated GoMock package.
package mock

import (
	domains "clean-architecture/domains"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEmployeeRepository is a mock of EmployeeRepository interface
type MockEmployeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeRepositoryMockRecorder
}

// MockEmployeeRepositoryMockRecorder is the mock recorder for MockEmployeeRepository
type MockEmployeeRepositoryMockRecorder struct {
	mock *MockEmployeeRepository
}

// NewMockEmployeeRepository creates a new mock instance
func NewMockEmployeeRepository(ctrl *gomock.Controller) *MockEmployeeRepository {
	mock := &MockEmployeeRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmployeeRepository) EXPECT() *MockEmployeeRepositoryMockRecorder {
	return m.recorder
}

// FindEmoloyeeOnly mocks base method
func (m *MockEmployeeRepository) FindEmployee(ctx interface{}, e, id int) (*domains.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEmployee", id)
	ret0, _ := ret[0].(*domains.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save mocks base method
func (m *MockEmployeeRepository) Create(ctx interface{}, e domains.Employee) (*domains.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entry", e)
	ret0, _ := ret[0].(*domains.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockEmployeeRepositoryMockRecorder) Save(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entry", reflect.TypeOf((*MockEmployeeRepository)(nil).Create), e)
}
